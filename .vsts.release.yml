parameters:
- name: version
  type: string
  displayName: Version
- name: derivedFrom
  type: string
  displayName: Derived From Version
  default: latest
- name: skipTests
  type: boolean
  default: false
  displayName: Skip Tests
# buildStageOnly is useful for testing changes of the build stage which cannot be tested
# in the ci project, like signing, without actually doing a release
- name: buildStageOnly
  type: boolean
  default: false
  displayName: Build Stage Only

variables:
  releaseBranch: releases/${{ parameters.version }}

extends:
  template: .azure-pipelines/pipeline.yml
  parameters:
    branch:  ${{ variables.releaseBranch }}
    componentDetection: false
    test: ${{ not(parameters.skipTests) }}
    sign: true
    publishArtifacts: true

    ${{ if not(parameters.buildStageOnly) }}:
      preBuildStages:
      - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
        - stage: Create_Release_Branch
          displayName: Create Release Branch
          jobs:
          ################################################################################
          - job: Create_Release_Branch
          ################################################################################
            displayName: Create Release Branch
            pool:
              vmImage: ubuntu-18.04

            steps:
            - checkout: self
          
            - task: NodeTool@0
              displayName: Use node 14.15.1
              inputs:
                versionSpec: "14.15.1"

            - script: |
                cd release
                npm install
                node createReleaseBranch.js ${{ parameters.version }} --derivedFrom=${{ parameters.derivedFrom }}
              env:
                EDITOR: cat
                PAT: $(GithubToken)
              displayName: Push release branch to GitHub

    ${{ if not(parameters.buildStageOnly) }}:
      postBuildStages:
      - stage: Release
        jobs:
        ################################################################################
        - job: publish_agent_packages
        ################################################################################
          displayName: Publish Agents (Windows/Linux/OSX)
          pool:
            name: AzDevProdRMAgents
          steps:

          # Clean
          - checkout: self
            clean: true

          # Switch to release branch
          - template: switch-branch.yml
            parameters:
              branch: ${{ variables.releaseBranch }}
          
          # Download all agent packages from all previous phases
          - task: DownloadBuildArtifacts@0
            displayName: Download Agent Packages
            inputs:
              artifactName: agent

          # Upload agent packages to Azure blob storage and refresh Azure CDN
          - powershell: |
              Write-Host "Preloading Azure modules." # This is for better performance, to avoid module-autoloading.
              Import-Module AzureRM, AzureRM.profile, AzureRM.Storage, Azure.Storage, AzureRM.Cdn -ErrorAction Ignore -PassThru
              Enable-AzureRmAlias -Scope CurrentUser
              $uploadFiles = New-Object System.Collections.ArrayList
              $certificateThumbprint = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalCertThumbprint
              $clientId = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalClientId
              Write-Host "##vso[task.setsecret]$certificateThumbprint"
              Write-Host "##vso[task.setsecret]$clientId"
              Login-AzureRmAccount -ServicePrincipal -CertificateThumbprint $certificateThumbprint -ApplicationId $clientId -TenantId $(TenantId)
              Select-AzureRmSubscription -SubscriptionId $(SubscriptionId)
              $storage = Get-AzureRmStorageAccount -ResourceGroupName vstsagentpackage -AccountName vstsagentpackage
              $versionDir = "${{ parameters.version }}"
              Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent" | ForEach-Object {
                $target=$_
                Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent/$target" -Include "*.zip","*.tar.gz" | ForEach-Object {
                  $executable = $_
                  Write-Host "Uploading $executable to BlobStorage vstsagentpackage/agent/$versionDir"
                  Set-AzureStorageBlobContent -Context $storage.Context -Container agent -File "$(System.ArtifactsDirectory)/agent/$target/$executable" -Blob "$versionDir/$executable" -Force
                  $uploadFiles.Add("/agent/$versionDir/$executable")
                }
              }
              Write-Host "Purge Azure CDN Cache"
              Unpublish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -PurgeContent $uploadFiles
              Write-Host "Force Refresh Azure CDN Cache"
              Publish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -LoadContent $uploadFiles
            displayName: Upload to Azure Blob

          # Create agent release on Github
          - powershell: |
              Write-Host "Creating github release."
              $releaseNotes = [System.IO.File]::ReadAllText("$(Build.SourcesDirectory)\releaseNote.md").Replace("<AGENT_VERSION>","${{ parameters.version }}")
              $releaseData = @{
                tag_name = "v${{ parameters.version }}";
                target_commitish = "$(Build.SourceVersion)";
                name = "v${{ parameters.version }}";
                body = $releaseNotes;
                draft = $false;
                prerelease = $true;
              }
              $releaseParams = @{
                Uri = "https://api.github.com/repos/Microsoft/azure-pipelines-agent/releases";
                Method = 'POST';
                Headers = @{
                  Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("vsts:$(GithubToken)"));
                }
                ContentType = 'application/json';
                Body = (ConvertTo-Json $releaseData -Compress)
              }
              [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
              $releaseCreated = Invoke-RestMethod @releaseParams
              Write-Host $releaseCreated
              $releaseId = $releaseCreated.id
              $assets = [System.IO.File]::ReadAllText("$(Build.SourcesDirectory)\assets.json").Replace("<AGENT_VERSION>","${{ parameters.version }}")
              $assetsParams = @{
                Uri = "https://uploads.github.com/repos/Microsoft/azure-pipelines-agent/releases/$releaseId/assets?name=assets.json"
                Method = 'POST';
                Headers = @{
                  Authorization = 'Basic ' + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("vsts:$(GithubToken)"));
                }
                ContentType = 'application/octet-stream';
                Body = [system.Text.Encoding]::UTF8.GetBytes($assets)
              }
              Invoke-RestMethod @assetsParams
            displayName: Create agent release on Github

      - stage: CreatePR
        jobs:
        ################################################################################
        - job: create_ado_pr
        ################################################################################
          displayName: Create PR in AzureDevOps
          pool:
            vmImage: ubuntu-18.04

          steps:
          - checkout: self

          - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
            - script: git checkout ${{ variables.releaseBranch }}
              displayName: Checkout release branch

          - bash: |
              set -x
              cd release
              npm install
              ls
              node createAdoPr.js ${{ parameters.version }}
            displayName: Create PR in AzureDevOps
            env:
              USER: $(User)
              PAT: $(AdoPAT)
